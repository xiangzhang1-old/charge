#!/bin/bash
#-------------Choose whether vaspkit or split_dos-----------------------
echo Integrated Projected DOS: integration of DOS of wavefunctions projected onto spherical harmonics within spheres of a radius RWIGS
#if option is '-tex'(tex)
if [[ ${modnames[tex]} == 1 ]] ; then
 sep=' &'
 eoline='\\ \hline'
 math='$'
 UP='\uparrow'
 DOWN='\downarrow'
else
 sep=':'
 UP='UP'
 DOWN='DN'
fi
if [[ ${modnames[vaspkit]} == 1 ]] ; then
#-------------VASPKIT PDOS PART. May be buggy. --------------------------------
echo "Warning: d_xy and d_{x2-y2} may have been confused by the VASPKIT writer. For my own analysis, I have already swapped d_xy and d_x2-y2, and benchmarked this 'swap' to at least two cases. But for publication purposes, better have some authority check this."
echo "${PWD##*/}" 
echo
echo "lm-projected DOS:"
for ((i=1;i<=$nelement;i++))
do
 tmp=`cat POSCAR | sed -n '7p' | awk -v number=$i '{print $number}'`
 natom=$(($natom+$tmp))
 #get the dos
 ele="`echo $element| awk -v number=$i '{print $number}'`"
 $SCRIPTDIR/vaspkit.0.43/src/vaspkit >/dev/null 2>/dev/null <<!
 13
 2
 $natom
!
 #get the name-of-orbital
 orbital=`cat ILMDOS.UP.$natom.dat | sed -n '1p'`
 orbital=${orbital/d_x^2-y^2/d_\{xy\}}
 orbital=${orbital/d_xy/d_x^2-y^2}
 orbital=${orbital/d_\{xy\}/d_xy}
 if [ "$1" == '-tex' ] ; then
  orbital=${orbital/d_x^2-y^2/d_\{x^2-y^2\}}
  orbital=${orbital/d_xy/d_\{xy\}}
  orbital=${orbital/d_yz/d_\{yz\}}
  orbital=${orbital/d_xz/d_\{xz\}}
  orbital=${orbital/d_z^2/d_\{z^2\}}
 fi
 norbital=`echo $orbital| wc -w`
 norbital=$(($norbital-2))
 #get the fermi-line : up-spin
 echo -n "$math${ele}_$UP$math$sep   "
 fermi_line=`cat ILMDOS.UP.$natom.dat |sed '2d'| grep '^    -0.00' | sed -n '1p'`
 if [ -z "$fermi_line" ] ;then
  fermi_line=`cat ILMDOS.UP.$natom.dat |sed '2d'| grep '^     0.0'| sed -n '1p'`
 fi
 #parse the fermi-line
 for ((j=1;j<=$norbital&&j<=${keywords[orbital_max]};j++))
 do
  orbit="`echo $orbital | awk -v number=$(($j+2)) '{print $number}'`"
  orbit=`echo $math$orbit$math`
  orbit_occ="`echo $fermi_line | awk -v number=$(($j+1)) '{print $number}'`"
  printf "%s\t %.2f\t " $orbit $orbit_occ
 done
 echo $eoline
 #get the fermi-line : down-spin
 echo -n "$math${ele}_$DOWN$math$sep "
 fermi_line=`cat ILMDOS.DOWN.$natom.dat |sed '2d'| grep '^    -0.00' | sed -n '1p'`
 if [ -z "$fermi_line" ] ;then
  fermi_line=`cat ILMDOS.DOWN.$natom.dat |sed '2d'| grep '^     0.0'| sed -n '1p'`
 fi
 #parse the fermi-line
 for ((j=1;j<=$norbital&&j<=${keywords[orbital_max]};j++))
 do
  orbit="`echo $orbital | awk -v number=$(($j+2)) '{print $number}'`"
  orbit=`echo $math$orbit$math`
  orbit_occ="`echo $fermi_line | awk -v number=$(($j+1)) '{print $number}'`"
  printf "%s\t %.2f\t " $orbit ${orbit_occ#?} #this ${...#?} removes the first charactor (minus sign)
 done
 echo  $eoline
done
else 
#------------------The split_dos way----------------------------------------
split_dos 2>&1 > split_dos.log
if [[ ${modnames[tex]} == 1 ]] ; then
orbital_list='s  $p_y$ $p_z$ $p_x$  $d_{yz}$ $d_{xy}$ $d_{z^2}$ $d_{xz}$  $d_{x^2-y^2}$'
pyeoline='\\\\ \\hline'
else
orbital_list='s p_y p_z p_x d_xy d_yz d_z2 d_xz d_x^2-y^2 '
fi
spin_list="$UP $DOWN"
tmp=`cat DOS1 | wc -l`
if [[ "$tmp" -lt 3 ]] ; then
 echo "error: DOS1 generated by split_dos only has " `cat DOS1 | wc -l` " lines. You probably forgot to include LORBIT=11. This is bad: you wont have orbital-wise resolution. Exiting."
 exit 1
fi
for i in `ls DOS[0-9]*`
do
 sed -i '1d' $i
done
if [[ ${modnames[nospin]} == 1 ]] ; then
python -- <<END
import numpy as np
f=open("POSCAR","r")
lines=f.readlines()
element_list=lines[5].split()
atomcount=np.int_(lines[6].split())
orbital_list='$orbital_list'.split()
pointer=1
for element_idx in range(0,len(element_list)):
  element=element_list[element_idx]
  print '$math'+element+'$math'+'$sep ',
  dosfile=open("DOS"+str(pointer),"r")
  doslines=dosfile.readlines()
  doscurve=np.float_([line.split() for line in doslines])
  endidx=(np.abs(doscurve[:,0])).argmin()
  for orbital_idx in range(0,9):
   integral=np.trapz(doscurve[:endidx,orbital_idx+1],x=doscurve[:endidx,0])
   print orbital_list[orbital_idx]+' '+str('{0:.2f}'.format(integral)),
  print '$pyeoline '
  pointer=pointer+atomcount[element_idx]
END
else
python -- <<END
import numpy as np
f=open("POSCAR","r")
lines=f.readlines()
element_list=lines[5].split()
atomcount=np.int_(lines[6].split())
orbital_list='$orbital_list'.split()
spin_list='$spin_list'.split()
pointer=1
for element_idx in range(0,len(element_list)):
 for spin_idx in range(0,${keywords[nspin]}):
  for counter in range(0,atomcount[element_idx]):
   element=element_list[element_idx]
   spin=spin_list[spin_idx]
   print '$math'+element+str(counter+1)+'_'+spin+'$math'+'$sep ',
   dosfile=open("DOS"+str(pointer+counter),"r")
   doslines=dosfile.readlines()
   doscurve=np.float_([line.split() for line in doslines])
   endidx=(np.abs(doscurve[:,0])).argmin()
   maxidx=(np.abs(doscurve[:,0]-${keywords[max_energy]})).argmin()
   for orbital_idx in range(0,9):
    integral=np.trapz(doscurve[:endidx,2*orbital_idx+1+spin_idx],x=doscurve[:endidx,0])
    maxintegral=np.trapz(doscurve[:maxidx,2*orbital_idx+1+spin_idx],x=doscurve[:maxidx,0])
    if spin_idx==1:
     integral=-1*integral
     maxintegral=-1*maxintegral
    print orbital_list[orbital_idx]+' '+str('{0:.2f}'.format(integral)),
   print '$pyeoline '
 pointer=pointer+atomcount[element_idx]
END
fi #fi spin
#------------------End PDOS--------------------------------------------------
fi

#------------------Bader Charge----------------------------------------------
echo 
echo " An oversimplified version of Bader charge. Boundaries are defined as zero-flux surfaces. Note that certain flags should be set (e.g. LAECHG) for this to be reasonable."
bader CHGCAR 1>/dev/null 2>/dev/null
natom=0
#iterate, for each element do vaspkit
for ((i=1;i<=$nelement;i++))
do
 tmp=`cat POSCAR | sed -n '7p' | awk -v number=$i '{print $number}'`
 echo -n `echo $element | awk -v number=$i '{print $number}'`"$sep "
 for ((j=1;j<=$tmp;j++))
 do
  nline=$(($natom+$j+2))
  charg=`cat ACF.dat | sed -n "${nline}p" | awk '{print $5}'`
  printf "%.2f " $charg
 done
 natom=$(($natom+$tmp))
 echo $eoline
done
echo
#----------------------Bader Mag------------------------------
if [[ ${modnames[spin]} == 1 ]] ; then
 echo 
 echo "An also oversimplified version of Bader magnetic charge. "
 chgsplit.sh CHGCAR >/dev/null 2>/dev/null
 bader cf2 >/dev/null 2>/dev/null
 natom=0
 #iterate, for each element do vaspkit
 for ((i=1;i<=$nelement;i++))
 do
  tmp=`cat POSCAR | sed -n '7p' | awk -v number=$i '{print $number}'`
  echo -n `echo $element | awk -v number=$i '{print $number}'`"$sep "
  for ((j=1;j<=$tmp;j++))
  do
   nline=$(($natom+$j+2))
   charg=`cat ACF.dat | sed -n "${nline}p" | awk '{print $5}'`
   printf "%.2f " $charg
  done
  natom=$(($natom+$tmp))
  echo $eoline
 done
 echo
fi
#-------------------------OUTCAR RWIGS charge-----------------------------
echo 
echo "Total charge inside the Wigner-Seitz Radius in OUTCAR"
nlinetot=40 #MAXIMUM ATOM NUMBER = 40-4
natom=0
nline=0
tmp=0
for ((i=1;i<=$nelement;i++))
do
 #get the name-of-orbital
 orbital=`grep -m 1 -A${keywords[nlinetotal]} '# of ion' OUTCAR | sed -n '1p'`
 norbital=`echo $orbital| wc -w`
 norbital=$(($norbital-3))
 #get the fermi-line 
 ele="`echo $element| awk -v number=$i '{print $number}'`"
 echo -n "${ele}$sep   "
 tmp=`cat POSCAR | sed -n '7p' | awk -v number=$i '{print $number}'`
 for ((j=1;j<=$tmp;j++))
 do
  nline=$(($natom+$j+2))
  fermi_line=`grep -m 1 -A${keywords[nlinetotal]} '# of ion' OUTCAR | sed -n "${nline}p" ` 
  charg=`echo $fermi_line | awk '{print $(NF)}'` 
  printf "%.2f " $charg
 done
 natom=$(($natom+$tmp))
 echo $eoline
done
echo

#----------------------OUTCAR RWIGS charge, decomposed---------------------
echo 
echo "Charge inside the Wigner-Seitz Radius, decomposed onto spdf orbitals in OUTCAR"
nlinetot=40 #MAXIMUM ATOM NUMBER = 40-4
natom=0
nline=0
tmp=0
for ((i=1;i<=$nelement;i++))
do
 #get the name-of-orbital
 orbital=`grep -m 1 -A${keywords[nlinetotal]} '# of ion' OUTCAR | sed -n '1p'`
 norbital=`echo $orbital| wc -w`
 norbital=$(($norbital-3))
 #get the fermi-line 
 ele="`echo $element| awk -v number=$i '{print $number}'`"
 echo -n "${ele}$sep   "
 tmp=`cat POSCAR | sed -n '7p' | awk -v number=$i '{print $number}'`
 natom=$(($natom+$tmp))
 nline=$(($natom+2))
 fermi_line=`grep -m 1 -A${keywords[nlinetotal]} '# of ion' OUTCAR | sed -n "${nline}p" ` 
 #parse the fermi-line
 for ((j=1;j<=$norbital;j++))
 do
  orbit="`echo $orbital | awk -v number=$(($j+3)) '{print $number}'`"
  orbit=`echo $math$orbit$math`
  orbit_occ="`echo $fermi_line | awk -v number=$(($j+1)) '{print $number}'`"
  printf "%s %.2f " $orbit $orbit_occ
 done
 echo $eoline
done
echo
#----------------------------------OUTCAR magnetization(x)-------------------
if [[ ${modnames[spin]} == 1 ]] ; then
 echo "Magnetization (x) [total magnetic moment inside the Wigner-Seitz Radius] in OUTCAR"
 natom=0 # when number-writing, natom is total number of atoms (not types) BEFORE the present atom type
 tmp=0   # when number-writing, tmp   is the total number of atoms of THIS TYPE
 nline=0 # when number-writing, nline is the No of line to be written, =$natom+4+(1 to $tmp)
 for ((i=1;i<=$nelement;i++))
 do
  tmp=`cat POSCAR | sed -n '7p' | awk -v number=$i '{print $number}'`
  ele="`echo $element| awk -v number=$i '{print $number}'`"
  echo -n "$ele$sep "
  for ((j=1;j<=$tmp;j++))
  do
   nline=$(($natom+$j+4))
   charg=`grep -m 1 -A${keywords[nlinetotal]} 'magnetization (x)' OUTCAR | sed -n "${nline}p"  | awk -v number=${keywords[outcar_mag_no]} '{print $number}'`
   printf "%.2f " $charg
  done
  natom=$(($natom+$tmp))
  echo $eoline
 done
 echo
 rm -rf *LMDOS*
fi
#------------Bonus---TOTEN-------------
echo "Total Energy: "`grepen`
